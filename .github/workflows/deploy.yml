name: CocoroTricks Deploy

on:
  workflow_dispatch:
    inputs:
      target_env:
        description: "staging or production"
        required: true
        default: "staging"
      ref:
        description: "Git ref to deploy (e.g., main or a commit SHA)"
        required: true
        default: "main"
      confirm:
        description: "Type yes to confirm deployment"
        required: true
        default: "no"

jobs:
  sanity:
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "yes" ]; then
            echo "Confirmation missing. Type yes to proceed."
            exit 1
          fi

      - name: Echo plan
        run: |
          echo "Will deploy ref=${{ github.event.inputs.ref }} to env=${{ github.event.inputs.target_env }}"

  deploy:
    needs: [sanity]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Set env mode
        run: |
          if [ "${{ github.event.inputs.target_env }}" = "production" ]; then
            echo "MODE=prod" >> $GITHUB_ENV
          else
            echo "MODE=staging" >> $GITHUB_ENV
          fi

      # --- START OF NEW STEPS (ADDED BY GEMINI) ---

      # Step 1: Load secrets based on environment (staging or prod)
      - name: Load secrets by MODE
        shell: bash
        run: |
          if [ "$MODE" = "prod" ]; then
            echo "OPENAI_API_KEY=${{ secrets.PROD_OPENAI_API_KEY }}" >> $GITHUB_ENV
            echo "BROWSERSTACK_USERNAME=${{ secrets.PROD_BROWSERSTACK_USERNAME }}" >> $GITHUB_ENV
            echo "BROWSERSTACK_ACCESS_KEY=${{ secrets.PROD_BROWSERSTACK_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "EAS_ACCESS_TOKEN=${{ secrets.PROD_EAS_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "EAS_PROJECT_ID=${{ secrets.PROD_EAS_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SHOPIFY_STOREFRONT_TOKEN=${{ secrets.PROD_SHOPIFY_STOREFRONT_TOKEN }}" >> $GITHUB_ENV
          else
            echo "OPENAI_API_KEY=${{ secrets.STAGING_OPENAI_API_KEY }}" >> $GITHUB_ENV
            echo "BROWSERSTACK_USERNAME=${{ secrets.STAGING_BROWSERSTACK_USERNAME }}" >> $GITHUB_ENV
            echo "BROWSERSTACK_ACCESS_KEY=${{ secrets.STAGING_BROWSERSTACK_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "EAS_ACCESS_TOKEN=${{ secrets.STAGING_EAS_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "EAS_PROJECT_ID=${{ secrets.STAGING_EAS_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SHOPIFY_STOREFRONT_TOKEN=${{ secrets.STAGING_SHOPIFY_STOREFRONT_TOKEN }}" >> $GITHUB_ENV
          fi

      # Step 2: Sanity check to see if secrets were loaded correctly
      - name: Sanity (no secret print)
        run: |
          echo "OPENAI=$( [ -n "$OPENAI_API_KEY" ] && echo OK || echo MISSING )"
          echo "BS_USER=$( [ -n "$BROWSERSTACK_USERNAME" ] && echo OK || echo MISSING )"
          echo "EAS=$( [ -n "$EAS_ACCESS_TOKEN" ] && echo OK || echo MISSING )"
          echo "SHOPIFY=$( [ -n "$SHOPIFY_STOREFRONT_TOKEN" ] && echo OK || echo MISSING )"
      
      # Step 3: Check BrowserStack connectivity
      - name: BrowserStack ping
        if: env.BROWSERSTACK_USERNAME != '' && env.BROWSERSTACK_ACCESS_KEY != ''
        env:
          BROWSERSTACK_USERNAME: ${{ env.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ env.BROWSERSTACK_ACCESS_KEY }}
        run: |
          curl -sSf -u "${{ env.BROWSERSTACK_USERNAME }}:${{ env.BROWSERSTACK_ACCESS_KEY }}" https://api.browserstack.com/automate/plan.json | jq .

      # Step 4: Install EAS CLI
      - name: Install EAS CLI
        if: env.EAS_ACCESS_TOKEN != ''
        run: npm i -g eas-cli
      
      # Step 5: Trigger a new EAS build (true build)
      - name: EAS build (profile by MODE)
        if: env.EAS_ACCESS_TOKEN != '' && env.EAS_PROJECT_ID != ''
        run: |
          PROFILE=$( [ "$MODE" = "prod" ] && echo production || echo preview )
          eas build --non-interactive --platform all --profile "$PROFILE" --no-wait --json --token ${{ env.EAS_ACCESS_TOKEN }} > eas-build.json
          BUILD_URL=$(cat eas-build.json | jq -r '.[0].artifacts.buildUrl')
          BUILD_ID=$(cat eas-build.json | jq -r '.[0].id')
          echo

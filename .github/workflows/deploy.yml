name: CocoroTricks Deploy

on:
  workflow_dispatch:
    inputs:
      target_env:
        description: "staging or production"
        required: true
        default: "staging"
      ref:
        description: "Git ref to deploy (e.g., main or a commit SHA)"
        required: true
        default: "main"
      confirm:
        description: "Type yes to confirm deployment"
        required: true
        default: "no"

jobs:
  sanity:
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "yes" ]; then
            echo "Confirmation missing. Type yes to proceed."
            exit 1
          fi

      - name: Echo plan
        run: |
          echo "Will deploy ref=${{ github.event.inputs.ref }} to env=${{ github.event.inputs.target_env }}"

  deploy:
    needs: [sanity]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}

      - name: Set env mode
        run: |
          if [ "${{ github.event.inputs.target_env }}" = "production" ]; then
            echo "MODE=prod" >> $GITHUB_ENV
          else
            echo "MODE=staging" >> $GITHUB_ENV
          fi

      # --- START OF NEW STEPS (ADDED BY GEMINI) ---

      # Step 1: Load secrets based on environment (staging or prod)
      - name: Load secrets by MODE
        shell: bash
        run: |
          if [ "$MODE" = "prod" ]; then
            echo "OPENAI_API_KEY=${{ secrets.PROD_OPENAI_API_KEY }}" >> $GITHUB_ENV
            echo "BROWSERSTACK_USERNAME=${{ secrets.PROD_BROWSERSTACK_USERNAME }}" >> $GITHUB_ENV
            echo "BROWSERSTACK_ACCESS_KEY=${{ secrets.PROD_BROWSERSTACK_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "EAS_ACCESS_TOKEN=${{ secrets.PROD_EAS_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "EAS_PROJECT_ID=${{ secrets.PROD_EAS_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SHOPIFY_STOREFRONT_TOKEN=${{ secrets.PROD_SHOPIFY_STOREFRONT_TOKEN }}" >> $GITHUB_ENV
          else
            echo "OPENAI_API_KEY=${{ secrets.STAGING_OPENAI_API_KEY }}" >> $GITHUB_ENV
            echo "BROWSERSTACK_USERNAME=${{ secrets.STAGING_BROWSERSTACK_USERNAME }}" >> $GITHUB_ENV
            echo "BROWSERSTACK_ACCESS_KEY=${{ secrets.STAGING_BROWSERSTACK_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "EAS_ACCESS_TOKEN=${{ secrets.STAGING_EAS_ACCESS_TOKEN }}" >> $GITHUB_ENV
            echo "EAS_PROJECT_ID=${{ secrets.STAGING_EAS_PROJECT_ID }}" >> $GITHUB_ENV
            echo "SHOPIFY_STOREFRONT_TOKEN=${{ secrets.STAGING_SHOPIFY_STOREFRONT_TOKEN }}" >> $GITHUB_ENV
          fi
      
      # Step 2: Set up EXPO_TOKEN for authentication (more reliable than --token)
      - name: Set EXPO_TOKEN
        run: echo "EXPO_TOKEN=${{ env.EAS_ACCESS_TOKEN }}" >> $GITHUB_ENV
    
      # Step 3: Sanity check to see if secrets were loaded correctly
      - name: Sanity (no secret print)
        run: |
          echo "OPENAI=$( [ -n "$OPENAI_API_KEY" ] && echo OK || echo MISSING )"
          echo "BS_USER=$( [ -n "$BROWSERSTACK_USERNAME" ] && echo OK || echo MISSING )"
          echo "EAS=$( [ -n "$EAS_ACCESS_TOKEN" ] && echo OK || echo MISSING )"
          echo "SHOPIFY=$( [ -n "$SHOPIFY_STOREFRONT_TOKEN" ] && echo OK || echo MISSING )"
      
      # Step 4: Check BrowserStack connectivity
      - name: BrowserStack ping
        if: env.BROWSERSTACK_USERNAME != '' && env.BROWSERSTACK_ACCESS_KEY != ''
        env:
          BROWSERSTACK_USERNAME: ${{ env.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ env.BROWSERSTACK_ACCESS_KEY }}
        run: |
          curl -sSf -u "${{ env.BROWSERSTACK_USERNAME }}:${{ env.BROWSERSTACK_ACCESS_KEY }}" https://api.browserstack.com/automate/plan.json | jq .

      # Step 5: Install jq for JSON manipulation
      - name: Install jq
        if: env.EAS_PROJECT_ID != ''
        run: sudo apt-get update && sudo apt-get install -y jq
      
      # Step 6: Setup Expo and EAS CLI (official action for non-interactive CI)
      - name: Setup Expo and EAS
        if: env.EAS_ACCESS_TOKEN != ''
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ env.EXPO_TOKEN }}
      
      # Step 7: Check Expo Project Files (validate before configure)
      - name: Check Expo Project Files
        if: env.EAS_PROJECT_ID != ''
        run: |
          if [ ! -f "app.json" ] && [ ! -f "expo.json" ] && [ ! -f "package.json" ]; then
            echo "❌ Expo project files (app.json/expo.json/package.json) missing. Run 'npx create-expo-app' or configure locally first."
            exit 1
          fi
          if grep -q '"expo"' package.json || [ -f "app.json" ] || [ -f "expo.json" ]; then
            echo "✅ Expo project detected."
          else
            echo "❌ No Expo configuration found in package.json."
            exit 1
          fi
          echo "Project ready for EAS."
      
      # Step 8: Update eas.json with project ID (assume pre-configured locally)
      - name: Update eas.json with project ID
        if: env.EAS_PROJECT_ID != ''
        run: |
          if [ -f eas.json ]; then
            jq --arg pid "${{ env.EAS_PROJECT_ID }}" '.projectId = $pid' eas.json > eas.tmp && mv eas.tmp eas.json
            echo "Updated eas.json with project ID ${{ env.EAS_PROJECT_ID }}:"
            cat eas.json
          else
            echo "Warning: eas.json not found. Ensure it's committed to the repo."
          fi
        continue-on-error: true  # Allow build to proceed if eas.json missing
      
      # Step 9: Trigger a new EAS build (true build)
      - name: EAS build (profile by MODE)
        if: env.EAS_ACCESS_TOKEN != '' && env.EAS_PROJECT_ID != ''
        env:
          EXPO_TOKEN: ${{ env.EXPO_TOKEN }}
        run: |
          PROFILE=$( [ "$MODE" = "prod" ] && echo production || echo preview )
          eas build --non-interactive --platform all --profile "$PROFILE" --no-wait --json > eas-build.json
          BUILD_URL=$(cat eas-build.json | jq -r '.[0].artifacts.buildUrl')
          BUILD_ID=$(cat eas-build.json | jq -r '.[0].id')
          echo "BUILD_URL=$BUILD_URL" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "EAS build triggered with profile $PROFILE. Build ID: $BUILD_ID"

      # Step 10: Wait for the build to complete and get the status
      - name: Get build status and artifacts
        if: env.BUILD_URL != ''
        env:
          EXPO_TOKEN: ${{ env.EXPO_TOKEN }}
        run: |
          echo "Waiting for build ${{ env.BUILD_ID }} to complete..."
          eas build:status --json --id ${{ env.BUILD_ID }} > eas-status.json
          BUILD_STATUS=$(cat eas-status.json | jq -r '.[0].status')
          BUILD_URL=$(cat eas-status.json | jq -r '.[0].artifacts.buildUrl')
          BUILD_QR_CODE_URL=$(cat eas-status.json | jq -r '.[0].artifacts.qrCodeUrl')
          
          if [ "$BUILD_STATUS" != "finished" ]; then
            echo "Build did not finish successfully. Status: $BUILD_STATUS"
            exit 1
          fi

          echo "✅ EAS Build finished successfully."
          echo "BUILD_QR_CODE_URL=$BUILD_QR_CODE_URL" >> $GITHUB_ENV
          echo "BUILD_URL=$BUILD_URL" >> $GITHUB_ENV

      # Step 11: (Optional) OpenAI connectivity smoke test
      - name: OpenAI smoke test
        if: env.OPENAI_API_KEY != '' && vars.ENABLE_OPENAI_SMOKE == 'true'
        env:
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        run: |
          curl -sSf https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"model":"gpt-4o-mini","messages":[{"role":"user","content":"ok"}],"max_tokens":5}' | jq .

      # Step 12: (Optional) Shopify Storefront connectivity smoke test
      - name: Shopify Storefront smoke
        if: env.SHOPIFY_STOREFRONT_TOKEN != '' && vars.SHOPIFY_DOMAIN != ''
        env:
          TOKEN: ${{ env.SHOPIFY_STOREFRONT_TOKEN }}
          DOMAIN: ${{ vars.SHOPIFY_DOMAIN }}
        run: |
          curl -sSf "https://$DOMAIN/api/2024-07/graphql.json" \
            -H "Content-Type: application/json" \
            -H "X-Shopify-Storefront-Access-Token: $TOKEN" \
            --data '{"query":"{ shop { name } }"}' | jq .

      # --- END OF NEW STEPS (ADDED BY GEMINI) ---

      - name: Deploy (placeholder)
        run: |
          echo "Deploying with MODE=$MODE ..."
          echo "✅ Done (placeholder)."

  post:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "Deployed ${{ github.event.inputs.ref }} to ${{ github.event.inputs.target_env }}" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ env.BUILD_URL }}" ]; then
            echo "### EAS Build Result" >> $GITHUB_STEP_SUMMARY
            echo "**Profile:** ${{ env.MODE }}" >> $GITHUB_STEP_SUMMARY
            echo "**Build URL:** [${{ env.BUILD_URL }}](${{ env.BUILD_URL }})" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ env.BUILD_QR_CODE_URL }}" ]; then
              echo "![QR Code](${{ env.BUILD_QR_CODE_URL }})" >> $GITHUB_STEP_SUMMARY
            fi
            echo "---" >> $GITHUB_STEP_SUMMARY
          fi
          echo "✅ All checks passed. You can now test the build or promote it to production." >> $GITHUB_STEP_SUMMARY
